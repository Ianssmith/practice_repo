Scala
1.What is a trait ? when to use ? 
2.Difference between trait and sealed trait?
3.What is an abstract class? 
4.What is the difference between an java interface and a scala trait?
5.What is a singleton 
6.What is a higher order function?
a function which takes a function as an argument or is passed to another function as an argument.
7.What is a closure 
8.What is a companion object? What rae the advantages ? example
9.Nil vs Null vs null vs Nothing vs None vs Unit 
10.What is pure function?
a function that has no "side effects" is deterministic (produces same output with same input) and referentially
transparent (meaning you can replace the function call with it's result)
11.What is SBT and how have you used it? 
12.What is currying?
13.Difference between currying and higher-order functions
14.Difference between var and val?
15.What is case class?
16.Why/when to use case class? Example
17.Difference between case class and normal class?
18.Scala type hierarchy?
19.What are partially applied functions?
20.What is tail recursion.
a functional way to implement a looping mechanism, where if the last action of a
function is to call itself it's stack frame can be resused preventing the need for a new 
stack and evading potential stack overflow for deeply recursive functions
you can use @tailrec annotation to require a recursive function be use a tail call
import scala.annotation.tailrec
@tailrec
def gcd(a:Int,b:Int):Int = ...  